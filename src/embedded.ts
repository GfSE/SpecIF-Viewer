
function embeddedSpecif() {
	"use strict";

	// construct main app:
	var self:any = {};
	// IE does not support ()=>{..} --> "syntax error" at load time.
	self.init = function() {

		// must set it here, because the language files must be read first:
		document.title = self.title = i18n.LblReader;
		// Add a global spinner with state control;
		// all actions are deactivated as long as the app is busy.
		// - 'pageActions' are at the top of the page and can be initiated independently of the app's state
		// - 'contentActions' appear on the content pane (the shown tab) depending on the app's state
		// - 'elementActions' apply to a single list entry in the content pane (tab)
		self.busy = new State({
			showWhenSet: ['#spinner'],
			hideWhenSet: ['.pageActions','.contentActions']
		//	hideWhenSet: ['.pageActions','.contentActions','.elementActions']
		});
		// Define the module hierarchy; it will be used to load the modules and to control the views later on:
		let define = {
			// Define
			// - name: the modules to load as specified in 'moduleManager.js'
			// - loadAs: name for execution (addressable javascript object)
			// - the hierarchy of views using implicit actions hide/show or refresh
			// - the explicit actions independent of any view

			// Let's start at the top level:
			// no name, thus no additional script file will be loaded at top level
			view: '#app',
			selector: '#pageSelector',			// DOM element to choose the view of a child (top level)
			selectorType: 'btns',
			children: [{
				name: 'profileAnonymous',
				loadAs: 'me'					// the name of the controller object to construct
				// no view
			},{
				name: 'cache'
				// no view
			},{
				name: 'ioSpecif'
				// no view
			},{
				name: CONFIG.specifications,
				loadAs: 'specs',					// the name of the controller object to construct
				// This is a view of the parent:
				view: '#'+CONFIG.specifications,	// uses implicit actions show/hide
				label: i18n.BtnRead,
				selectedBy: '#selectSpecs',			// DOM element in parent's selector to choose this view
				// To control the views of the children:
				selector: '#specsSelector',			// DOM element to choose the view of a child (next level)
				selectorType: 'tabs',
				children: [{
					// nothing to load, code is contained in parent's file
					// Definitions as a view of the parent:
					view: '#'+CONFIG.objectList,	// uses implicit action refresh at parent level
					byDefault: true,				// select this view at the current level, if unspecified
					viewClass: 'content',
					label: i18n.TabDocument,
					selectedBy: '#selectDocument'	// DOM element in parent's selector to choose this view
				},{
					// nothing to load, code is contained in parent's file
					// Definitions as a view of the parent:
					view: '#'+CONFIG.relations,		// uses implicit action refresh at parent level
					viewClass: 'content',
					label: i18n.TabRelations,
					selectedBy: '#selectStatements',// DOM element in parent's selector to choose this view
					children: [{
						name: 'statementsGraph'
						// no view
					}]
				},{
					name: CONFIG.objectFilter,
					// no loadAs, so name will be used for the controller object
					// Definitions as a view of the parent:
					view: '#'+CONFIG.objectFilter,	// uses implicit action refresh at parent level
					viewClass: 'contentWide',		// whole width under control of the view
					label: i18n.TabFilter,
					selectedBy: '#selectFilters'	// DOM element in parent's selector to choose this view
				},{
					name: CONFIG.reports,
					// no loadAs, so name will be used for the controller object
					// Definitions as a view of the parent:
					view: '#'+CONFIG.reports,		// uses implicit action refresh at parent level
					viewClass: 'contentWide',		// whole width under control of the view
					label: i18n.TabReports,
					selectedBy: '#selectReports'	// DOM element in parent's selector to choose this view
				}]
			},{
				name: 'about',
				view: '#about',
				viewClass: 'contentWide',			// whole width under control of the view
				label: i18n.IcoAbout,
				selectedBy: '#selectAbout'			// DOM element in parent's selector to choose this view
			}]
		};

		// React on Browser Back/Forward buttons:
		window.addEventListener("hashchange", self.show );

		// Make sure page divs are resized, if the browser window is changed in size:
		bindResizer();

		moduleManager.load(define, { done: self.show });
	};
	self.show = function() {
		// data and type are valid, but it is necessary to indicate that the data is not zipped:
		self.ioSpecif.init( {mediaTypeOf: attachment2mediaType} );
		self.ioSpecif.verify( {name:'data.specif'} ); 
		
		self.busy.set();
		// @ts-ignore - 'data' is a global variable with SpecIF-data defined in the html-file generated by 'toHTML()'.
		self.ioSpecif.toSpecif(str2ab(data))
			.done(function (res: SpecIF) {
					specif.check( res )
						.then( (dta: SpecIF)=>{
								var opts = {
										deduplicate: true,
										addGlossary: true,
										collectProcesses: false
									};
								self.cache.create( dta, opts )
									.done( function() {
										message.show( i18n.lookup( 'MsgImportSuccessful', dta.title ), {severity:"success",duration:CONFIG.messageDisplayTimeShort} );
										setTimeout( function() {
												// change view to browse the content:
												moduleManager.show({ view: '#'+CONFIG.specifications /*, urlParams:urlP */ });
												self.busy.reset();
											}, 
											CONFIG.showTimelag 
										);
									})
									.fail( stdError );
							},
							stdError
						);
			})
			.fail( stdError );  
	};
	self.logout = function() {
		self.me.logout();
		self.hide();
	};
	self.hide = function() {
		// hide the app and show the login dialog:
		// ToDo
	};
	return self;
}
